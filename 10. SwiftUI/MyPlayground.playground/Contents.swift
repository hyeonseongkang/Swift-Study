/*
 SwiftUI
 스위프트의 수많은 장점은 선언적 구문(declarative syntax)과 데이터 주도(data driven) 기반에서 비롯된다.
 
 선언적 구문
 UIKit과 인터페이스 빌더를 사용하여 사용자 인터페이스 레이아웃을 설꼐하고 필요한 동작을 구현하는 것과는 완전히 다른 방법인 선언적 구문이 SwiftUI에 도입되었다. 화면을 구성하는 컴포넌트들의 레이아웃과 모양에 대한 복잡한 세부 사항을 직접 설계하는 대신, SwiftUI는 단순하면서도 직관적인 구문을 이용하여 화면을 기술할 수 있게 해준다.
 SwiftUI를 사용하면 레이아웃이 실제로 구촉되는 방식의 복잡함에 대해 고민할 필요 없이 사용자 인터페이스가 어떤 모양이어야 하는지를 선언하는 방식으로 레이아웃을 생성할 수 있다.
 
 데이터 주도
 SwiftUI 이전에는 앱 내에 있는 데이터의 현재 값을 검사하려면 그에 대한 코드를 앱에 포함해야 했다. 시간이 지남에 따라 데이터가 변한다면 사용자 인터페이스가 데이터의 최신 상태를 항상 반영하도록 하는 코드도 작성해야 할 것이다. 어떠면 데이터가 변경되었는지를 주기적으로 검사하는 코드를 작성하거나 데이터 업데이트를 사용자가 요청하는 갱신 메뉴를 제공해야 할지도 모른다.
 
 SwiftUI는 앱의 데이터 모델과 사용자 인터페이스 컴포넌트, 그리고 기능을 제공하는 로직을 바인딩(binding)하는 여러 방법으로 이러한 복잡도를 해결한다.
 
 데이터 주도로 구현하면 데이터 모델의 앱의 다른 부분에서 구독(subscribe)할 수 있는 데이터 변수를 게시(publish)하게 된다. 이러한 방법을 통해 데이터가 변경되었다는 사실을 모든 구동자에게 자동으로 알릴 수 있다. 만약 사용자 인터페이스 컴포넌트와 데이터 모델 간에 바인딩이 된다면, 추가적인 코드를 작성하지 않아도 모든 데이터의 변경 사항을 SwiftUI가 사용자 인터페이스에 자동으로 반영할 것이다.
 
 */

